@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService

<div class="products-page">
    <!-- Sidebar -->
    <div class="products-sidebar">
        <div class="sidebar-header">
            <h3>Filters</h3>
        </div>
        <div class="sidebar-content">
            <div class="filter-input">
                <input type="text" @bind="Tag" placeholder="Filter by keyword" />
                <button @onclick="OnInitialized">Filter</button>
            </div>
            <div class="categories-list">
                @foreach (var item in DataPermutations)
                {
                    <div class="category-item">
                        <h4>@item.Key</h4>
                        @foreach (var value in item.Value)
                        {
                            <div class="category-value" @onclick="() => FilterByValue(value)">@value</div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="products-main">
        <!-- Trending Now Section -->
        @if (TrendingProduct != null)
        {
            <div class="trending-now">
                <h3>Trending Now</h3>
                <div class="card trending-card">
                    <a href="ProductDetails/@TrendingProduct.Id" class="text-decoration-none">
                        <img src="@TrendingProduct.Image" alt="@TrendingProduct.Title" class="img-fluid" style="max-width: 200px; max-height: 300px; display: block; margin: 0 auto;" />
                        <div class="card-body">
                            <h5 class="card-title text-center" style="color: #5B5B5B">@TrendingProduct.Title</h5>
                            <p>@TrendingProduct.Description</p>
                            <p class="text-center">❤️ @TrendingProduct.Likes Likes</p>
                        </div>
                    </a>
                </div>
            </div>
        }

        <button @onclick="SortProductsByLikes" style="background-color: @(IsSortedByLikes ? "#D0F520" : "grey"); color: white;">
            Sort by Number of Likes
        </button>


        @if (!FilteredProducts.Any())
        {
            <div class="text-center p-4">
                <p>No products found for the given criteria. Try a new criteria!</p>
            </div>
        }

        <div class="card-columns">
            @foreach (var product in FilteredProducts)
            {
                <div class="card">
                    <a href="ProductDetails/@product.Id" class="text-decoration-none">
                        <div class="card-img" style="background-image: url('@product.Image');">
                        </div>
                        <div class="card-body">
                            <h5 class="card-title text-center" style="color: #5B5B5B">@product.Title</h5>
                        </div>
                    </a>
                    <button @onclick="() => AddLike(product.Id)" class="like-button">
                        ❤️ <span class="like-count">@product.Likes</span>
                    </button>
                </div>
            }
        </div>
    </div>
</div>

@if (selectedProduct != null)
{
    <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-img" style="background-image: url('@selectedProduct.Image');">
                        </div>
                        <div class="card-body">
                            <p class="card-text">@selectedProduct.Description</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Parameter for the selected tag
    [Parameter] public string Tag { get; set; }

    private Dictionary<string, HashSet<string>> DataPermutations { get; set; }

    // List of filtered products
    private IEnumerable<ProductModel> FilteredProducts;

    // State to track sorting by likes
    private bool IsSortedByLikes { get; set; } = false;

    // Product with the most likes
    private ProductModel TrendingProduct { get; set; }


    protected override void OnInitialized()
    {
        ApplyFilters();
        SetTrendingProduct();
    }

    // Method to apply filters and sorting
    private void ApplyFilters()
    {
        // Get all products from the service
        var allProducts = ProductService.GetAllData();
        DataPermutations = ProductService.GetAllDataPermutations();

        // Initialize FilteredProducts to show all products by default
        FilteredProducts = allProducts;

        // Filter by tag if a tag is provided
        if (!string.IsNullOrEmpty(Tag))
        {
            FilteredProducts = allProducts.Where(p =>
                p.Category.Equals(Tag, StringComparison.OrdinalIgnoreCase) ||
                p.Size.Equals(Tag, StringComparison.OrdinalIgnoreCase) ||
                p.Color.Equals(Tag, StringComparison.OrdinalIgnoreCase) ||
                p.Material.Any(m => m.Equals(Tag, StringComparison.OrdinalIgnoreCase)) ||
                p.Style.Any(s => s.Equals(Tag, StringComparison.OrdinalIgnoreCase))
            );
        }

        // Apply sorting by likes if enabled
        if (IsSortedByLikes)
        {
            FilteredProducts = FilteredProducts.OrderByDescending(p => p.Likes);
        }
    }

    private void FilterByValue(string value)
    {
        Tag = value;
        ApplyFilters();
    }

    // Method to find the product with the most likes
    private void SetTrendingProduct()
    {
        TrendingProduct = ProductService.GetAllData().OrderByDescending(p => p.Likes).FirstOrDefault();
    }

    // Method to toggle sorting by number of likes
    private void SortProductsByLikes()
    {
        IsSortedByLikes = !IsSortedByLikes;
        ApplyFilters();
    }

    // Method to handle like clicks
    private void AddLike(string productId)
    {
        ProductService.AddLike(productId);
        ApplyFilters();
        SetTrendingProduct();
    }

    ProductModel selectedProduct;
    string selectedProductId;

    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetAllData().First(x => x.Id == productId);
    }
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
