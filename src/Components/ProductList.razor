@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService

<div class="products-page">
    <!-- Sidebar for filters -->
    <div class="products-sidebar">
        <div class="sidebar-header">
            <h3>Filters</h3>
        </div>

        <div class="sidebar-content">
            <div class="filter-input">
                <!-- Search input box with search button -->
                <input type="text" @bind="Tag"
                       @bind:event="oninput"
                       @onkeydown="@(e => { if (e.Key == "Enter") {ApplyFilters(); }})"
                       placeholder="Search (Powered By Buzzword)" />
                <button @onclick="OnInitialized">Search</button>
            </div>

            <div class="categories-list">
                <!-- Dynamically generated filter categories and values -->
                @foreach (var item in DataPermutations)
                {
                    <div class="category-item">
                        <h4>@item.Key</h4>
                        @foreach (var value in item.Value)
                        {
                            @if (item.Key.ToLower() == "colors")
                            {
                                <div class="category-value" @onclick="() => FilterByValue(value)">
                                    <span class="category-text">@value</span>
                                    <span class="color-circle color-@value.ToLower()">
                                    </span>
                                </div>
                            } else if (item.Key.ToLower() == "sizes") {
                                <div class="category-value" @onclick="() => FilterByValue(value)">
                                    <span class="category-text">@value</span>
                                    <span class="size-icon">
                                        @value[0]
                                    </span>
                                </div>
                            } else if (item.Key.ToLower() != null)
                            {
                                <div class="category-value" @onclick="() => FilterByValue(value)">
                                    <div class="category-text">
                                        @value
                                    </div>
                                </div>
                            }
                        }
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Main content section -->
    <div class="products-main">
        <!-- Trending Now Section -->
        @if (TrendingProducts != null)
        {
            if (TrendingProducts.Any())
            {
                <div class="trending-now">
                    <h3>Trending Now</h3>
                    <div class="carousel-container">
                        <button class="carousel-button" @onclick="PreviousProduct">&lt;</button>

                        <div class="products-display">
                            @{
                                int prevIndex = (currentIndex - 1 + TrendingProducts.Count) % TrendingProducts.Count;
                                int nextIndex = (currentIndex + 1) % TrendingProducts.Count;
                            }

                            @* Previous Product Preview *@
                            <div class="card trending-card preview-card preview-left">
                                <img src="@TrendingProducts[prevIndex].Image" alt="@TrendingProducts[prevIndex].Title" class="favorites-img trending-image" />
                            </div>

                            @* Current Product *@
                            <div class="card trending-card current-card">
                                <a href="ProductDetails/@TrendingProducts[currentIndex].Id" class="text-decoration-none">
                                    <img src="@TrendingProducts[currentIndex].Image" alt="@TrendingProducts[currentIndex].Title" class="favorites-img trending-image" />
                                    <div class="card-body">
                                        <h5 class="card-title text-center">@TrendingProducts[currentIndex].Title</h5>
                                    </div>
                                </a>
                                <div class="card-footer">
                                    <p class="text-center">❤️ @TrendingProducts[currentIndex].Likes Likes</p>
                                </div>
                            </div>

                            @* Next Product Preview *@
                            <div class="card trending-card preview-card preview-right">
                                <img src="@TrendingProducts[nextIndex].Image" alt="@TrendingProducts[nextIndex].Title" class="favorites-img trending-image" />
                            </div>
                        </div>

                        <button class="carousel-button" @onclick="NextProduct">&gt;</button>
                    </div>
                </div>
            }
        }


        <!-- Sorting controls -->
        <div class="sorting-controls">
            <span>Sort by number of likes:</span>
            <button class='btn-arrow @GetButtonClass("asc")' @onclick='() => ToggleSort("asc")'>↑</button>
            <button class='btn-arrow @GetButtonClass("desc")' @onclick='() => ToggleSort("desc")'>↓</button>
        </div>



        <!-- No products message -->
        @if (!FilteredProducts.Any())
        {
            <div class="text-center p-4">
                <p>No products found for the given criteria. Try a new criteria!</p>
            </div>
        }

        <!-- Display filtered products -->
        <div class="card-columns">
            @foreach (var product in FilteredProducts)
            {
                <div class="card">
                    <a href="ProductDetails/@product.Id" class="text-decoration-none">
                        <div class="card-img" style="background-image: url('@product.Image');">
                        </div>

                        <div class="card-body">
                            <h5 class="card-title text-center">@product.Title</h5>
                        </div>
                    </a>
                    <!-- Like button for each product -->
                    <button @onclick="() => AddLike(product.Id)" class="like-button">
                        ❤️ <span class="like-count">@product.Likes</span>
                    </button>

                    <!-- Display Comments -->
                    @if (product.Comments != null)
                    {
                        if (product.Comments.Any())
                        {
                            <ul class="category-text">
                                @foreach (var comment in product.Comments)
                                {
                                    <li>@comment</li>
                                }
                            </ul>
                        }
                    }

                    <!-- Comments Section -->
                    <div class="comments-section">
                        <h6> Comments: </h6>
                        <input type="text"
                           class="comment-input"
                           placeholder="Add a comment..."
                           @bind="NewComment" />

                        <button class="submit-comment-btn" @onclick="() => AddComment(product.Id)">Submit</button>
                        @if (product.Comments != null)
                        {
                            if (product.Comments.Any())
                            {
                                <ul class="comments-list">
                                    @foreach (var comment in product.Comments)
                                    {
                                        <li>@comment</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <p>No comments yet. be the first to comment!</p>
                            }
                        }
                        else
                        {
                            <p>No comments yet. be the first to comment!</p>
                        }

                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Modal for displaying selected product details -->
@if (selectedProduct != null)
{
    <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productTitle">@selectedProduct.Title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>

                <div class="modal-body">
                    <div class="card">
                        <div class="card-img" style="background-image: url('@selectedProduct.Image');">
                        </div>

                        <div class="card-body">
                            <p class="card-text">@selectedProduct.Description</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    /// <summary>
    /// Parameter for the selected tag from the filter input.
    /// </summary>
    [Parameter] public string Tag { get; set; }

    // Stores permutations of product categories, sizes, and colors
    private Dictionary<string, HashSet<string>> DataPermutations { get; set; }

    // List of products filtered based on search criteria
    private IEnumerable<ProductModel> FilteredProducts;

    // Stores order of sorting
    private string CurrentSort { get; set; } = "none";

    // List of top 5 products with the most likes
    private List<ProductModel> TrendingProducts { get; set; }

    // Index of product in the featured product carousel
    private int currentIndex = 0;

    // The currently selected product
    ProductModel selectedProduct;

    // Comments
    private string NewComment { get; set; }

    /// <summary>
    /// Adds a new comment to the specified product.
    /// </summary>
    private void AddComment(string productId)
    {
        if (!string.IsNullOrWhiteSpace(NewComment))
        {
            var product = ProductService.GetAllData().FirstOrDefault(p => p.Id == productId);
            if (product != null)
            {
                product.Comments.Add(NewComment);
                ProductService.UpdateProduct(product);
                NewComment = string.Empty;
                ApplyFilters();
            }
        }
    }

    /// <summary>
    /// Finds the next trending product.
    /// </summary>
    private void NextProduct()
    {
        if (TrendingProducts == null)
        {
            return;
        }

        if (!TrendingProducts.Any())
        {
            return;
        }

        currentIndex = (currentIndex + 1) % TrendingProducts.Count;
    }

    // ID of the selected product
    string selectedProductId;

    /// <summary>
    /// Finds the previous trending product.
    /// </summary>
    private void PreviousProduct()
    {
        if (TrendingProducts == null)
        {
            return;
        }

        if (!TrendingProducts.Any())
        {
            return;
        }
        currentIndex = (currentIndex - 1 + TrendingProducts.Count) % TrendingProducts.Count;
    }

    /// <summary>
    /// Initializes component and sets up default data.
    /// </summary>
    protected override void OnInitialized()
    {
        ApplyFilters();
        SetTrendingProduct();
    }

    /// <summary>
    /// Checks if a source string matches a search term (case-insensitive and partial matches allowed).
    /// </summary>
    /// <param name="source">The source string to search within.</param>
    /// <param name="searchTerm">The term to search for.</param>
    /// <returns>True if the search term is found; otherwise, false.</returns>
    private bool IsFuzzyMatch(string source, string searchTerm)
    {
        if (string.IsNullOrEmpty(source))
        {
            return false;
        }

        if (string.IsNullOrEmpty(searchTerm))
        {
            return false;
        }

        source = source.ToLower();
        searchTerm = searchTerm.ToLower();

        if (source.Contains(searchTerm))
        {
            return true;
        }

        if (searchTerm.Contains(source))
        {
            return true;
        }

        var searchWords = searchTerm.Split(',', StringSplitOptions.RemoveEmptyEntries);
        foreach (var word in searchWords)
        {
            if (source.Contains(word))
            {
                return true;
            }
        }

        return false;
    }

    /// <summary>
    /// Filters products based on the current tag and applies sorting if enabled.
    /// </summary>
    private void ApplyFilters()
    {
        var allProducts = ProductService.GetAllData();
        DataPermutations = ProductService.GetAllDataPermutations();

        FilteredProducts = allProducts;

        if (!string.IsNullOrEmpty(Tag))
        {
            var searchTerms = Tag.ToLower().Split(' ', StringSplitOptions.RemoveEmptyEntries);

            FilteredProducts = allProducts.Where(p =>
            {
                foreach (var term in searchTerms)
                {
                    if (!IsFuzzyMatch(p.Category, term) &&
                        !IsFuzzyMatch(p.Size.ToString(), term) &&
                        !IsFuzzyMatch(p.Color, term) &&
                        !IsFuzzyMatch(p.Description ?? "", term) &&
                        !p.Material.Any(m => IsFuzzyMatch(m, term)) &&
                        !p.Style.Any(s => IsFuzzyMatch(s, term)))
                    {
                        return false;
                    }
                }
                return true;
            });
        }

        if (CurrentSort == "asc")
        {
            FilteredProducts = FilteredProducts.OrderBy(p => p.Likes);
        }

        if (CurrentSort == "desc")
        {
            FilteredProducts = FilteredProducts.OrderByDescending(p => p.Likes);
        }
    }

    /// <summary>
    /// Dynamically determines the CSS class for the sorting buttons.
    /// </summary>
    /// <param name="order">The sort order to check ("asc" or "desc").</param>
    /// <returns>Returns "active" if the current sort matches the order; otherwise, an empty string.</returns>
    private string GetButtonClass(string order)
    {
        if (CurrentSort == order)
        {
            return "active";
        }

        return "";
    }

    /// <summary>
    /// Toggles the sorting order based on the button clicked.
    /// If the same button is clicked twice, it resets the sort order to "none."
    /// </summary>
    /// <param name="order">The sorting order ("asc" for ascending or "desc" for descending).</param>
    private void ToggleSort(string order)
    {
        if (CurrentSort == order)
        {
            CurrentSort = "none";
        }
        else
        {
            CurrentSort = order;
        }

        ApplyFilters();
    }

    /// <summary>
    /// Filters products by a specific value.
    /// </summary>
    /// <param name="value">The filter value to apply.</param>
    private void FilterByValue(string value)
    {
        Tag = value;
        ApplyFilters();
    }

    /// <summary>
    /// Sets the top 5 trending products by the number of likes.
    /// </summary>
    private void SetTrendingProduct()
    {
        TrendingProducts = ProductService.GetAllData()
            .OrderByDescending(p => p.Likes)
            .Take(5)
            .ToList();
    }

    /// <summary>
    /// Adds a like to a specific product.
    /// </summary>
    /// <param name="productId">The ID of the product to like.</param>
    private void AddLike(string productId)
    {
        ProductService.AddLike(productId);
        ApplyFilters();
        SetTrendingProduct();
    }

    /// <summary>
    /// Selects a product by its ID and loads its details.
    /// </summary>
    /// <param name="productId">The ID of the product to select.</param>
    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectedProduct = ProductService.GetAllData().First(x => x.Id == productId);
    }
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">