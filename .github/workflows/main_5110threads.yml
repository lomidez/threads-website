# GitHub Actions for deploying an ASP.Net Core app to Azure Web App - 5110Threads
name: Build and deploy ASP.Net Core app to Azure Web App - 5110Threads
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '3.1'

      # Download existing products.json from Azure if it exists
      - name: Download existing products.json
        run: |
          $profile = [System.Convert]::FromBase64String('${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_825F9E522C5341B8A3DDE6E64DB258FF }}')
          $profileContent = [System.Text.Encoding]::UTF8.GetString($profile)
          $xml = [xml]$profileContent
          $ftpUrl = $xml.publishData.publishProfile | Where-Object {$_.publishMethod -eq 'FTP'} | Select-Object -ExpandProperty publishUrl
          $username = $xml.publishData.publishProfile | Where-Object {$_.publishMethod -eq 'FTP'} | Select-Object -ExpandProperty userName
          $password = $xml.publishData.publishProfile | Where-Object {$_.publishMethod -eq 'FTP'} | Select-Object -ExpandProperty userPWD
          
          $ftpRequest = [System.Net.FtpWebRequest]::Create("ftp://$ftpUrl/site/wwwroot/wwwroot/data/products.json")
          $ftpRequest.Credentials = New-Object System.Net.NetworkCredential($username, $password)
          $ftpRequest.Method = [System.Net.WebRequestMethods+Ftp]::DownloadFile
          
          try {
            $ftpResponse = $ftpRequest.GetResponse()
            $responseStream = $ftpResponse.GetResponseStream()
            $fileStream = [System.IO.File]::Create("./ContosoCrafts.WebSite/wwwroot/data/products.json")
            $responseStream.CopyTo($fileStream)
            $fileStream.Close()
            $ftpResponse.Close()
            Write-Host "Successfully downloaded existing products.json"
          } catch {
            Write-Host "No existing products.json found or error downloading"
          }
        shell: pwsh

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: Publish with dotnet
        run: dotnet publish -c Release -o ./publish

      # Ensure the products.json is in the publish output
      - name: Copy products.json to publish directory
        run: |
          $sourceFile = "./ContosoCrafts.WebSite/wwwroot/data/products.json"
          $targetDir = "./publish/wwwroot/data"
          if (!(Test-Path $targetDir)) {
            New-Item -ItemType Directory -Force -Path $targetDir
          }
          if (Test-Path $sourceFile) {
            Copy-Item $sourceFile -Destination $targetDir -Force
          }
        shell: pwsh

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-app
          path: ./publish

  deploy:
    runs-on: windows-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: dotnet-app
          path: ./downloaded-artifact

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: '5110Threads'
          slot-name: 'Production'
          package: ./downloaded-artifact
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_825F9E522C5341B8A3DDE6E64DB258FF }}
